"""
The functions in this module are examples and are meant to be customized.
"""
__all__ = ['speaker_action', 'notification_action']

from core.jsr223.scope import events, items, StringType, OFF, PLAY
from core.metadata import get_key_value
from core.log import logging, LOG_PREFIX
from core.date import seconds_between, human_readable_seconds
from core.actions import PersistenceExtensions
from personal.utils import notification

from org.joda.time import DateTime

log = logging.getLogger("{}.personal.area_triggers_and_actions.area_actions".format(LOG_PREFIX))

def speaker_action(item, active):
    """
    This function performs an action on a speaker Item.

    This is an example that will need to be customized.

    Arguments:
        Item item: The Item to perform the action on
        boolean active: Area activity (True for active and False for inactive)
    """
    #start_time = DateTime.now().getMillis()
    if items["Wakeup_Alarm"] == OFF:
        autoplay_mode_item_name = item.name.replace("_Player", "_AutoPlay_Mode")
        if items[autoplay_mode_item_name] == StringType("Sound Effects"):
            if items["Sound_Effect"] != StringType("Normal"):
                log.debug("speaker_action: {}: sound effects".format(item.name))
                if item.state != PLAY:
                    workingPrefixList = str(items["Working_Prefix_List"]).split(",")
                    if len(workingPrefixList) > 0:
                        alertPrefixURI = workingPrefixList.pop()
                        if len(workingPrefixList) > 0:
                            events.sendCommand("Working_Prefix_List", ",".join(workingPrefixList))
                        else:
                            events.sendCommand("Sound_Effect", str(items["Sound_Effect"]))
                        log.debug("speaker_action: {}: sound effects: alertPrefixURI=[{}]".format(item.name, alertPrefixURI))
                        events.sendCommand(item.name.replace("_Player", "_PlayURI"), alertPrefixURI)
        elif items[autoplay_mode_item_name] == StringType("House Shuffle"):
            if active:
                if (items["Presence"] == StringType("Home") and str(items["Mode"]) not in ["Night", "Late"]) or items["Mode"] == StringType("Party"):
                    if item.state != PLAY:
                        events.sendCommand(item.name.replace("_Player", "_PlayURI"), "HouseShuffle")
            else:
                events.sendCommand(item.name.replace("_Player", "_Stop"), "ON")
    #log.warn("Test: speaker_action: {}: [{}]: time=[{}]".format(item.name, "ON" if active else "OFF", DateTime.now().getMillis() - start_time))

def notification_action(item, active):
    """
    This function sends a notification.

    This is an example that will need to be customized.

    Arguments:
        Item item: The Item to perform the action on
        boolean active: Area activity (True for active and False for inactive)
    """
    #start_time = DateTime.now().getMillis()
    timer_type = "ON" if active else "OFF"
    notification_metadata = get_key_value(item.name, "area_triggers_and_actions", "actions", "notification_action", timer_type)
    message = notification_metadata.get("message")
    if message is None:
        time_interval = seconds_between(PersistenceExtensions.previousState(item).timestamp, DateTime.now())
        if time_interval < 1:
            message = "{} is {}".format(item.label, "active" if active else "inactive")
        else:
            message = "{} has been {} for {}".format(item.label, "active" if active else "inactive", human_readable_seconds(time_interval))
    types = notification_metadata.get("types", {})
    priority = types.get("priority", 0)
    audio = types.get("audio", False)
    kodi = types.get("kodi", False)
    mobile = types.get("mobile", False)
    notification("Area Action", message, priority=priority, audio=audio, kodi=kodi, mobile=mobile)
    #log.warn("Test: notification_action: {}: [{}]: time=[{}]".format(item.name, "ON" if active else "OFF", DateTime.now().getMillis() - start_time))
